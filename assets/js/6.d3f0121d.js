(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{412:function(t,s,a){t.exports=a.p+"assets/img/eight.7cf155be.jpeg"},413:function(t,s,a){t.exports=a.p+"assets/img/nine.9dc441d4.jpeg"},414:function(t,s,a){t.exports=a.p+"assets/img/ten.b7e70d77.png"},415:function(t,s,a){t.exports=a.p+"assets/img/11.367fdbcf.png"},416:function(t,s,a){t.exports=a.p+"assets/img/12.9651e9dd.png"},417:function(t,s,a){t.exports=a.p+"assets/img/13.0192a0cc.png"},418:function(t,s,a){t.exports=a.p+"assets/img/14.10da60a2.png"},419:function(t,s,a){t.exports=a.p+"assets/img/15.d3dbdc4c.png"},420:function(t,s,a){t.exports=a.p+"assets/img/16.707027e8.png"},421:function(t,s,a){t.exports=a.p+"assets/img/17.2e44e084.png"},422:function(t,s,a){t.exports=a.p+"assets/img/18.6d859fce.png"},423:function(t,s,a){t.exports=a.p+"assets/img/19.9e3a9ed6.png"},424:function(t,s,a){t.exports=a.p+"assets/img/20.c8ba9105.png"},425:function(t,s,a){t.exports=a.p+"assets/img/21.7b39f17b.png"},470:function(t,s,a){"use strict";a.r(s);var n=a(33),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"骨架梳理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#骨架梳理"}},[t._v("#")]),t._v(" 骨架梳理")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("Vite")]),t._v(" 是一种新型的前端构建工具，能够显著提升前端开发体验。")])]),t._v(" "),n("p",[t._v("总结起来"),n("code",[t._v("vite")]),t._v(" 通过 "),n("code",[t._v("connect")]),t._v(" 库提供开发服务器，通过中间件机制实现多项开发服务器配置。而 "),n("code",[t._v("vite")]),t._v(" 在本地开发时没有借助 "),n("code",[t._v("webpack")]),t._v(" 或是 "),n("code",[t._v("rollup")]),t._v(" 这样的\n打包工具，而是通过调度内部 "),n("code",[t._v("plugin")]),t._v(" 实现了文件的转译，从而达到小而快的效果")]),t._v(" "),n("p",[t._v("本文阅读的 "),n("code",[t._v("Vite")]),t._v(" 源码版本是 "),n("code",[t._v("2.8.0-beta.3")]),t._v("，如果你想要和我一起阅读的话，你可以在这个地址下载 "),n("a",{attrs:{href:"https://github.com/vitejs/vite",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vite 源码"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("我们先来看看 "),n("code",[t._v("Vite")]),t._v(" 这个包的项目目录\n"),n("img",{attrs:{src:a(412),alt:"image"}})]),t._v(" "),n("p",[t._v("这是一个集成管理的项目，其核心就是在 "),n("code",[t._v("packages")]),t._v(" 里面的几个包（如下）")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("包名")]),t._v(" "),n("th",[t._v("作用")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("vite")])]),t._v(" "),n("td",[n("code",[t._v("Vite")]),t._v(" 主库，负责 "),n("code",[t._v("Vite")]),t._v(" 项目的本地开发（插件调度）和生产产物构建（Rollup 调度）")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("create-vite")])]),t._v(" "),n("td",[t._v("用于创建新的 "),n("code",[t._v("Vite")]),t._v(" 项目，内部存放了多个框架（如 "),n("code",[t._v("react、vue")]),t._v("）的初始化模板")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("plugin-vue")])]),t._v(" "),n("td",[n("code",[t._v("Vite")]),t._v(" 官方插件，用于提供 Vue 3 单文件组件支持")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("plugin-vue-jsx")])]),t._v(" "),n("td",[n("code",[t._v("Vite")]),t._v(" 官方插件，用于提供 Vue 3 JSX 支持（通过 专用的 Babel 转换插件）。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("plugin-react")])]),t._v(" "),n("td",[n("code",[t._v("Vite")]),t._v(" 官方插件，用于提供完整的 React 支持")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("plugin-legacy")])]),t._v(" "),n("td",[n("code",[t._v("Vite")]),t._v(" 官方插件，用于为打包后的文件提供传统浏览器兼容性支持")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("playground")])]),t._v(" "),n("td",[n("code",[t._v("Vite")]),t._v(" 内置的一些测试用例及 Demo")])])])]),t._v(" "),n("p",[t._v("重点说下 "),n("code",[t._v("vite")]),t._v(" 本地开发服务命令 —— "),n("code",[t._v("vite / vite dev / vite serve")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"vite-dev"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vite-dev"}},[t._v("#")]),t._v(" vite dev")]),t._v(" "),n("p",[n("code",[t._v("vite dev")]),t._v(" 调用了内部的 "),n("code",[t._v("createServer")]),t._v(" 方法创建了一个服务，这个服务利用中间件（第三方）支持了多种能力（如\n"),n("code",[t._v("跨域")]),t._v("、"),n("code",[t._v("静态文件服务器")]),t._v("等），并且内部创建了 "),n("code",[t._v("watcher")]),t._v(" 持续监听着文件的变更，进行实时编译和热重载;而 "),n("code",[t._v("createServer")]),t._v(" 做的\n事情就是我们需要关注的核心逻辑")]),t._v(" "),n("p",[t._v("在 "),n("code",[t._v("createServer")]),t._v(" 方法中，首先进行了对配置的收集工作 —— "),n("code",[t._v("resolveConfig")]),t._v(",可以直接参照\n"),n("a",{attrs:{href:"https://cn.vitejs.dev/config/#root",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vite 官方文档"),n("OutboundLink")],1),t._v("查看支持的配置项")]),t._v(" "),n("p",[n("code",[t._v("resolveConfig")]),t._v(" 的第一步就是加载项目目录的配置文件，如果没有指定配置文件位置，会自动在根目录下寻找 "),n("code",[t._v("vite.config.js")]),t._v("、\n"),n("code",[t._v("vite.config.mjs")]),t._v("、"),n("code",[t._v("vite.config.ts")]),t._v("、"),n("code",[t._v("vite.config.cjs")]),t._v(",如果没有找到配置文件，则直接会中止程序")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("vite")]),t._v(" 项目初始化时，会在项目根目录下自动生成 "),n("code",[t._v("vite.config.js")]),t._v(" 配置文件。")])]),t._v(" "),n("p",[t._v("在读取配置文件后，会将配置文件和初始化配置（优先级更高，有部分配置来自于命令行参数）进行合并，然后得到一份配置。（如下图）\n"),n("img",{attrs:{src:a(413),alt:"image"}})]),t._v(" "),n("h3",{attrs:{id:"配置收集-resolveconfig"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置收集-resolveconfig"}},[t._v("#")]),t._v(" 配置收集 - "),n("code",[t._v("resolveConfig")])]),t._v(" "),n("p",[t._v("在 "),n("code",[t._v("createServer")]),t._v(" 的开头，调用了 "),n("code",[t._v("resolveConfig")]),t._v(" 函数，进行配置收集")]),t._v(" "),n("ul",[n("li",[t._v("首先"),n("code",[t._v("resolveConfig")]),t._v(" 内部处理了插件排序规则，对应下面的排序规则\n"),n("img",{attrs:{src:a(414),alt:"image"}}),t._v("\n在后续处理的过程中，插件将按照对应的排序规则先后执行，这样能够让插件更好地工作在各个生命周期节点")])]),t._v(" "),n("h4",{attrs:{id:"合并插件配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合并插件配置"}},[t._v("#")]),t._v(" 合并插件配置")]),t._v(" "),n("p",[t._v("在插件排序完成后，"),n("code",[t._v("vite")]),t._v(" 的 "),n("code",[t._v("插件")]),t._v(" 暴露了一个配置 "),n("code",[t._v("config")]),t._v(" 字段，可以通过设置该属性，使插件能够新增或改写 "),n("code",[t._v("vite")]),t._v(" 的一\n些配置。（如下图）\n"),n("img",{attrs:{src:a(415),alt:"image"}})]),t._v(" "),n("h4",{attrs:{id:"处理-alias"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理-alias"}},[t._v("#")]),t._v(" 处理 alias")]),t._v(" "),n("p",[t._v("然后，"),n("code",[t._v("resolveConfig")]),t._v(" 内部处理了 "),n("code",[t._v("alias")]),t._v(" 的逻辑，将指定的 "),n("code",[t._v("alias")]),t._v(" 替换成对应的路径。\n"),n("img",{attrs:{src:a(416),alt:"image"}})]),t._v(" "),n("h4",{attrs:{id:"读取环境变量配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读取环境变量配置"}},[t._v("#")]),t._v(" 读取环境变量配置")]),t._v(" "),n("p",[t._v("接下来，"),n("code",[t._v("resolveConfig")]),t._v(" 内部找到 "),n("code",[t._v("env")]),t._v(" 的配置目录（默认为根目录），然后在目录中读取对应的 "),n("code",[t._v("env")]),t._v(" 环境变量配置文件。我们可以\n看看内部的读取规则优先级（如下图）\n"),n("img",{attrs:{src:a(417),alt:"image"}}),t._v("\n可以看出，读取的优先级分别是 "),n("code",[t._v(".env.[mode].local")]),t._v("、"),n("code",[t._v(".env.[mode]")]),t._v("。如果不存在对应 "),n("code",[t._v("mode")]),t._v(" 的配置文件，则会尝试去寻\n找 "),n("code",[t._v(".env.local")]),t._v("、"),n("code",[t._v(".env")]),t._v(" 配置文件，读取到配置文件后，使用 "),n("code",[t._v("doteenv")]),t._v(" 将环境变量写入到项目中；如果这些环境变量配置文\n件都不存在的话，则会返回一个空对象,该环境变量配置文件并不影响项目运行，所以不配置也没有什么影响。")]),t._v(" "),n("h4",{attrs:{id:"导出配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#导出配置"}},[t._v("#")]),t._v(" 导出配置")]),t._v(" "),n("p",[t._v("接下来，"),n("code",[t._v("vite")]),t._v(" 初始化了构建配置，也就是文档中的 "),n("code",[t._v("build")]),t._v(" 属性，详情可以参照\n"),n("a",{attrs:{href:"https://cn.vitejs.dev/config/#build-target",target:"_blank",rel:"noopener noreferrer"}},[t._v("构建选项文档"),n("OutboundLink")],1),t._v(" "),n("img",{attrs:{src:a(418),alt:"image"}}),t._v("\n最后，"),n("code",[t._v("resolveConfig")]),t._v(" 处理了一些 "),n("code",[t._v("publicDir")]),t._v("、"),n("code",[t._v("cacheDir")]),t._v(" 目录后，导出了下面这份配置。")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" resolved"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ResolvedConfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configFile"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" configFile "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("normalizePath")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configFile"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configFileDependencies"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    inlineConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    root"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" resolvedRoot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    base"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BASE_URL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    resolve"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" resolveOptions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    publicDir"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" resolvedPublicDir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    cacheDir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    command"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    isProduction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    plugins"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" userPlugins"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    build"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" resolvedBuildOptions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    preview"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolvePreviewOptions")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("preview"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    env"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("userEnv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BASE_URL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MODE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEV")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isProduction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" isProduction\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assetsInclude")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("file"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_ASSETS_RE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assetsFilter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    packageCache"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    createResolver"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    optimizeDeps"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("optimizeDeps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      esbuildOptions"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        keepNames"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("optimizeDeps"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("keepNames"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        preserveSymlinks"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("resolve"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("preserveSymlinks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("optimizeDeps"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("esbuildOptions\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    worker"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" resolvedWorkerOptions\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(419),alt:"image"}}),t._v(" "),n("code",[t._v("resolveConfig")]),t._v(" 内部还有一些额外的工作处理，主要是收集内部插件集合（如下图），还有配置一些废弃选项警告信息")]),t._v(" "),n("h3",{attrs:{id:"本地开发服务-createserver"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本地开发服务-createserver"}},[t._v("#")]),t._v(" 本地开发服务 - "),n("code",[t._v("createServer")])]),t._v(" "),n("p",[t._v("回到 "),n("code",[t._v("createServer")]),t._v(" 方法，该方法通过 "),n("code",[t._v("resolveConfig")]),t._v(" 拿到配置后，第一时间处理了 "),n("code",[t._v("ssr")]),t._v("（服务端渲染）的逻辑。\n如果使用了服务端渲染，则会通过别的方式进行本地开发调试;如果不是服务端渲染，则会创建一个 "),n("code",[t._v("http server")]),t._v(" 用于本地开发\n调试，同时创建一个 "),n("code",[t._v("websocket")]),t._v(" 服务用于热重载。（如下图）\n"),n("img",{attrs:{src:a(420),alt:"image"}})]),t._v(" "),n("h4",{attrs:{id:"文件监听-热重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文件监听-热重载"}},[t._v("#")]),t._v(" 文件监听 + 热重载")]),t._v(" "),n("p",[t._v("然后，"),n("code",[t._v("vite")]),t._v(" 创建了一个 "),n("code",[t._v("FSWatcher")]),t._v(" 对象，用于监听本地项目文件的变动。（这里使用的是 "),n("code",[t._v("chokidar")]),t._v(" 库）")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" watcher "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" chokidar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ignored"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 忽略 node_modules 目录的文件变更")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/node_modules/**'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 忽略 .git 目录的文件变更")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/.git/**'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 忽略用户传入的 `ignore` 目录文件的变更")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ignored"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" ignored "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ignored"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ignoreInitial"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ignorePermissionErrors"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    disableGlobbing"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("watchOptions\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" FSWatcher\n")])])]),n("p",[t._v("然后，"),n("code",[t._v("vite")]),t._v(" 将多个属性和方法组织成了一个 "),n("code",[t._v("server")]),t._v(" 对象，该对象负责启动本地开发服务，也负责服务后续的开发热重载。")]),t._v(" "),n("p",[t._v("接下来，我们看看 "),n("code",[t._v("watcher")]),t._v(" 是如何做页面热重载的吧，原理就是监听到文件变更后，重新触发插件编译，然后将更新消息发送给客户端。（如下图）\n"),n("img",{attrs:{src:a(421),alt:"image"}})]),t._v(" "),n("h4",{attrs:{id:"插件容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插件容器"}},[t._v("#")]),t._v(" 插件容器")]),t._v(" "),n("p",[t._v("接下来，"),n("code",[t._v("vite")]),t._v(" 创建了插件容器（"),n("code",[t._v("pluginContainer")]),t._v("），用于在构建的各个阶段调用插件的钩子。（如下图）\n"),n("img",{attrs:{src:a(422),alt:"image"}})]),t._v(" "),n("blockquote",[n("p",[t._v("实际上插件容器是在热重载之前创建的，为了方便阅读，文章将热重载的内容都放在了一起。")])]),t._v(" "),n("h4",{attrs:{id:"中间件机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中间件机制"}},[t._v("#")]),t._v(" 中间件机制")]),t._v(" "),n("p",[t._v("接下来是一些内部中间件的处理，当配置开发服务器选项时，"),n("code",[t._v("vite")]),t._v(" 内部通过 "),n("code",[t._v("connect")]),t._v(" 框架的中间件能力来提供支持。（如下图）\n"),n("img",{attrs:{src:a(423),alt:"image"}}),t._v("\n其中，对 "),n("code",[t._v("public")]),t._v(" 目录、公共路径等多项配置都是通过 "),n("code",[t._v("connect")]),t._v(" + 中间件实现的，充分地利用了第三方库的能力，而没有重复造轮子。")]),t._v(" "),n("h4",{attrs:{id:"预构建依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预构建依赖"}},[t._v("#")]),t._v(" 预构建依赖")]),t._v(" "),n("p",[t._v("接下来，"),n("code",[t._v("vite")]),t._v(" 内部对项目中使用到的依赖进行的预构建，一来是为了兼容不同的 ES 模块规范，二来是为了提升加载性能。（如下图）\n"),n("img",{attrs:{src:a(424),alt:"image"}}),t._v("\n准备工作就绪后，"),n("code",[t._v("vite")]),t._v(" 内部调用 "),n("code",[t._v("startServer")]),t._v(" 启动本地开发服务器。（如下）")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\nhttpServer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" host"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  httpServer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" onError"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("可以看出，在本地开发时，"),n("code",[t._v("vite")]),t._v(" 主要依赖 "),n("code",[t._v("插件 + 中间件体系")]),t._v(" 来提供能力支持。因为本地开发时只涉及到少量编译工作，所以非常的快。只\n有在构建生产产物时，"),n("code",[t._v("vite")]),t._v(" 才用到了 "),n("code",[t._v("rollup")]),t._v(" 进行构建。")]),t._v(" "),n("p",[t._v("我们用一张流程图来最后梳理一遍 "),n("code",[t._v("vite 本地开发服务")]),t._v(" 内部的工作流程吧\n"),n("img",{attrs:{src:a(425),alt:"image"}})]),t._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/qq_34621851/article/details/123130837",target:"_blank",rel:"noopener noreferrer"}},[t._v("vite build请参考这里"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"vite快还是慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vite快还是慢"}},[t._v("#")]),t._v(" vite快还是慢")]),t._v(" "),n("p",[t._v("谈到 Vite，给人的第一印象就是 dev server 启动速度快。同样规模的项目，相比 Webpack 动辄十几秒甚至几十秒的的启动速度，Vite 简直是快到没朋友，往往数秒之内即可完成启动，虽然也出现了\n一些诸如首屏、懒加载性能下降等负面效果，但整体来说依然利大于弊，开发幸福感提升非常明显")]),t._v(" "),n("h3",{attrs:{id:"vite的快"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vite的快"}},[t._v("#")]),t._v(" vite的快")]),t._v(" "),n("p",[t._v("Vite 的快，主要体现在两个方面: 快速的冷启动和快速的热更新。而 Vite 之所以能有如此优秀的表现，完全归功于 Vite 借助了浏览器对 ESM 规范的支持，采\n取了与 Webpack 完全不同的 unbundle 机制")]),t._v(" "),n("p",[t._v("首先要说的是webpack之所以能够大行其道，归功于它划时代的采用了 bundle 机制。通过这种 bundle 机制，Webpack 可以将项目中各种类型的源文件转化供浏览\n器识别的 js、css、img 等文件，建立源文件之间的依赖关系，并将数量庞大的源文件合并为少量的几个输出文件")]),t._v(" "),n("p",[t._v("bundle 工作机制的核心部分分为两块：构建模块依赖图 - module graph 和将 module graph 分解为最终供浏览器使用的几个输出文件")]),t._v(" "),n("h4",{attrs:{id:"构建-module-graph-的过程可以简单归纳为"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构建-module-graph-的过程可以简单归纳为"}},[t._v("#")]),t._v(" 构建 module graph 的过程可以简单归纳为:")]),t._v(" "),n("ol",[n("li",[t._v("获取配置文件中 entry 对应的 url (这个 url 一般为相对路径);")]),t._v(" "),n("li",[t._v("resolve - 将 url 解析为绝对路径，找到源文件在本地磁盘的位置，并构建一个 module 对象；")]),t._v(" "),n("li",[t._v("load - 读取源文件的内容;")]),t._v(" "),n("li",[t._v("transform - 使用对应的 loader 将源文件内容转化为浏览器可识别的类型；")]),t._v(" "),n("li",[t._v("parse - 将转化后的源文件内容解析为 AST 对象，分析 AST 对象，找到源文件中的静态依赖(import xxx from 'xxx') 和动态依赖(import('xx'))对应的 url, 并收集到 module 对象中；")]),t._v(" "),n("li",[t._v("遍历第 5 步收集到的静态依赖、动态依赖对应的 url，重复 2 - 6 步骤，直到项目中所有的源文件都遍历完成。")])]),t._v(" "),n("h4",{attrs:{id:"分解-module-graph-的过程也可以简单归纳为"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分解-module-graph-的过程也可以简单归纳为"}},[t._v("#")]),t._v(" 分解 module graph 的过程也可以简单归纳为:")]),t._v(" "),n("ol",[n("li",[t._v("预处理 module graph，对 module graph 做 tree shaking；")]),t._v(" "),n("li",[t._v("遍历 module graph，根据静态、动态依赖关系，将 module graph 分解为 initial chunk、async chunks；")]),t._v(" "),n("li",[t._v("优化 initial chunk、 async chunks 中重复的 module；")]),t._v(" "),n("li",[t._v("根据 optimization.splitChunks 进行优化，分离第三方依赖、被多个 chunk 共享的 module 到 common chunks 中；")]),t._v(" "),n("li",[t._v("根据 chunk 类型，获取对应的 template；")]),t._v(" "),n("li",[t._v("遍历每个 chunk 中收集的 module，结合 template，为每个 chunk 构建最后的输出内容；")]),t._v(" "),n("li",[t._v("将最后的构建内容输出到 output 指定位置；")])]),t._v(" "),n("p",[t._v("Webpack 的这种 bundle 机制，奠定了现代静态打包器(如 Rollup、Parcel、Esbuild)的标准工作模式")]),t._v(" "),n("p",[t._v("然而成也萧何败萧何，强大的 bundle 机制，也引发了构建速度缓慢的问题，而且项目规模越大，构建速度越是缓慢。其主要原因是构建 module graph 的过程中，涉及到大量的文\n件 IO、文件 transfrom、文件 parse 操作；以及分解 module graph 的过程中，需要遍历 module graph、文件 transform、文件 IO 等。这些操作，往往需要消耗大量\n的时间，导致构建速度变得缓慢")]),t._v(" "),n("p",[t._v("开发模式下，dev server 需要 Webpack 完成整个工作链路才可以启动成功，这就导致构建过程耗时越久，dev server 启动越久。为了加快构建速度，Webpack 也做了大量的优\n化，如 loader 的缓存功能、webpack5 的持久化缓存等，但这些都治标不治本，只要 Webpack 的核心工作机制不变，那 dev server 启动优化，依旧是一个任重道远的过\n程(基本上永远都达不到 Vite 那样的效果)")]),t._v(" "),n("h4",{attrs:{id:"vite-之所以在-dev-server-启动方面，如此给力，是因为它采取了与-webpack-截然不同的-unbundle-机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vite-之所以在-dev-server-启动方面，如此给力，是因为它采取了与-webpack-截然不同的-unbundle-机制"}},[t._v("#")]),t._v(" Vite 之所以在 dev server 启动方面，如此给力，是因为它采取了与 Webpack 截然不同的 unbundle 机制")]),t._v(" "),n("ol",[n("li",[t._v("不需要构建、分解 module graph，源文件之间的依赖关系完全通过浏览器对 ESM 规范的支持来解析")]),t._v(" "),n("li",[t._v("dev server 端会通过 middlewares 对请求做拦截，然后对源文件做 resolve、load、transform、parse 操作，然后再将转换以后的内容发送给浏览器")]),t._v(" "),n("li",[t._v("不对源文件做合并捆绑操作")])]),t._v(" "),n("p",[t._v("webpack 启动以后，会 watch 源文件的变化。当源文件发生变化后，Webpack 会重新编译打包。这个时候，由于我们只修改了一个文件，因此只需要对这个源文件做 resolve、 load、 transfrom、parse 操作，依赖\n的文件直接使用缓存，因此 dev server 的响应速度比冷启动要好很多;dev server 重新编译打包以后，会通过 ws 连接通知浏览器去获取新的打包文件，然后对页面做局部更新")]),t._v(" "),n("p",[t._v("Vite 采用 unbundle 机制，所以 dev server 在监听到文件发生变化以后，只需要通过 ws 连接通知浏览器去重新加载变化的文件，剩下的工作就交给浏览器去做了所以热更新速度很快")]),t._v(" "),n("h3",{attrs:{id:"vite的慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vite的慢"}},[t._v("#")]),t._v(" vite的慢")]),t._v(" "),n("p",[t._v("由于 unbundle 机制，首屏期间需要额外做以下工作:")]),t._v(" "),n("ol",[n("li",[t._v("不对源文件做合并捆绑操作，导致大量的 http 请求；")]),t._v(" "),n("li",[t._v("dev server 运行期间对源文件做 resolve、load、transform、parse 操作；")]),t._v(" "),n("li",[t._v("预构建、二次预构建操作也会阻塞首屏请求，直到预构建完成为止；")])]),t._v(" "),n("p",[t._v("和 Webpack 对比，Vite 把需要在 dev server 启动过程中完成的工作，转移到了 dev server 响应浏览器请求的过程中，不可避免的导致首屏性能下降。\n不过首屏性能差只发生在 dev server 启动以后第一次加载页面时发生。之后再 reload 页面时，首屏性能会好很多。原因是 dev server 会将之前已经完成转换的内容缓存起来")]),t._v(" "),n("p",[t._v("同样的， Vite 在懒加载方面的性能也比 Webpack 差。此外，如果懒加载过程中，发生了二次预构建，页面会 reload，对开发体验也有一定程度的影响")]),t._v(" "),n("h2",{attrs:{id:"vite使用esbuild"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vite使用esbuild"}},[t._v("#")]),t._v(" vite使用esbuild")]),t._v(" "),n("p",[t._v("我们提到过开发模式下使用 Vite 会有首屏性能下降的负面效果。之所以会造成首屏性能下降")]),t._v(" "),n("ul",[n("li",[t._v("一方面是 dev server 需要完成预构建才可以响应首屏请求；")]),t._v(" "),n("li",[t._v("另一方面是需要对请求文件做实时转换。\n那么我们就从这两个方面来做优化，vite也是这么做的；Vite借助了 Esbuild 能快速完成项目打包、文件转换的能力来进行预构建、内容转换")])]),t._v(" "),n("p",[t._v("Esbuild 是一款基于 Go 语言开发的 javascript 打包工具，最大的一个特征就是快，同样规模的项目，使用 Esbuild 可以将打包速度提升 10 - 100 倍，这对广大一直饱受 Webpack 缓慢打\n包速度折磨的开发人员来说，简直就是福音，而 Esbuild 之所以能这么快，主要原因有两个:")]),t._v(" "),n("ul",[n("li",[t._v("Go 语言开发，可以多线程打包，代码直接编译成机器码；Webpack 一直被人诟病构建速度慢，主要原因是在打包构建过程中，存在大量的 resolve、load、transform、parse 操作\n而这些操作通常是通过 javascript 代码来执行的。要知道，javascript 并不是什么高效的语言，在执行过程中要先编译后执行，还是单线程并且不能利用多核 cpu 优势，和 Go 语言相比，效率很低")]),t._v(" "),n("li",[t._v("可充分利用多核 cpu 优势")])]),t._v(" "),n("h4",{attrs:{id:"关键-api-transfrom-build"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关键-api-transfrom-build"}},[t._v("#")]),t._v(" 关键 API - transfrom & build")]),t._v(" "),n("p",[t._v("Esbuild 并不复杂。它对外提供了两个 API - transform 和 build，使用起来非常简单。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// transfrom将ts、jsx、tsx等格式的内容转化为js,只负责文件内容转换，并不生成一个新的文件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" esbuild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 code 转换为指定格式的内容")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// build根据指定的单个或者多个入口，分析依赖，并用loader将不同格式的内容转化为js内容，生成一个或多个 bundle 文件")]),t._v("\nesbuild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打包构建")]),t._v("\n")])])]),n("p",[t._v("和 Webpack、Rollup 等构建工具一样，Esbuild 也提供了供外部使用的 plugin，使得我们可以介入构建打包过程")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" customerPlugin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("setup")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析 url 时触发，可自定义 url 如何解析。如果 callback 有返回 path，后面的同类型 callback 将不会执行")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有的 onResolve callback 将按照对应的 plugin 注册的顺序执行")]),t._v("\n        build"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onResolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" filter"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("args")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// onLoad, 加载模块时触发，可自定义模块如何加载。 如果 callback 有返回 contents，后面的同类型 callback 将")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会执行。所有的 onLoad callback 将按照对应的 plugin 注册的顺序执行")]),t._v("\n        build"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onLoad")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" filter"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("args")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// onStart, 每次 build 开始时都会触发，没有入参，因此不具有改变 build 的能力。多个 plugin 的 onStart 并行执行")]),t._v("\n        build"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onStart")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// onEnd, 每次 build 结束时会触发，入参为 build 的结果，可对 result 做修改。所有的的 onEnd 将按照对应的 plugin 注册的顺序执行")]),t._v("\n        build"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onEnd")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("先来回顾一下为什么要做预构建,原因有两点:")]),t._v(" "),n("ul",[n("li",[t._v("将非 ESM 规范的代码转换为符合 ESM 规范的代码")]),t._v(" "),n("li",[t._v("将第三方依赖内部的多个文件合并为一个，减少 http 请求数量")])]),t._v(" "),n("p",[t._v("要完成预构建，最关键的两点是找到项目中所有的第三份依赖和对第三方依赖做合并、转换。借助 Esbuild，Vite 很轻松的实现了这两个诉求")]),t._v(" "),n("p",[t._v("寻找第三方依赖的过程非常简单，分为两步:")]),t._v(" "),n("ol",[n("li",[t._v("定义一个带 onResolve hook 和 onLoad hook 的 esbuild plugin；")]),t._v(" "),n("li",[t._v("执行 esbuild 的 build 方法做打包构建；")])]),t._v(" "),n("p",[t._v("和 Webpack、Rollup、Parcel 等构建工具一样，Esbuild 在做打包构建时也要构建模块依赖图 - module graph；在构建 module graph 时，\n第一步就是解析模块的绝对路径，这个时候就会触发 onResolve hook。在 onResolve hook 触发时，会传入模块的路径。根据模块的路径，我们\n就可以判断出这个模块是第三方依赖还是业务代码。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.tsx")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" react "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" CustomeComponent "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./components/CustomeComponent'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("解析 react、CustomeComponent 时，会触发 onResolve hook，入参分别为 'react' 和 './components/CustomeComponent'。根据入参，我们\n可以很清楚的区分 'react' 是第三方依赖，'./components/CustomeComponet' 是业务代码。这样，esbuild 完成构建，项目中的第三方依赖也就收集\n完毕了。所有的第三方依赖会收集到一个 deps 列表中。")]),t._v(" "),n("p",[t._v("知道了项目中的第三方依赖以后，再做合并、转换操作就非常简单了。这一步， Vite 直接通过 esbuild 提供的 build 方法，指定 entryPoints 为收集\n到的第三方依赖，format 为 esm，再做一次打包构建。这一次，会对第三方依赖做合并、转换操作。打包构建完成以后，再把构建内容输出到 /node_modules/.vite/deps 下。")]),t._v(" "),n("h4",{attrs:{id:"middlewares-中内容转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#middlewares-中内容转换"}},[t._v("#")]),t._v(" middlewares 中内容转换")]),t._v(" "),n("p",[t._v("Vite 中源文件的转换是在 dev server 启动以后通过 middlewares 实现的。当浏览器发起请求以后，dev sever 会通过相应的 middlewares 对请求\n做处理，然后将处理以后的内容返回给浏览器。middlewares 对源文件的处理，分为 resolve、load、transform、parser 四个过程：")]),t._v(" "),n("ol",[n("li",[t._v("resolve - 解析 url，找到源文件的绝对路径；")]),t._v(" "),n("li",[t._v("load - 加载源文件。如果是第三方依赖，直接将预构建内容返回给浏览器；如果是业务代码，继续 transform、parser。")]),t._v(" "),n("li",[t._v("transfrom - 对源文件内容做转换，即 ts -> js, less -> css 等。转换完成的内容可以直接返回给浏览器了。")]),t._v(" "),n("li",[t._v("parser - 对转换以后的内容做分析，找到依赖模块，对依赖模块做预转换 - pre transform 操作，即重复 1 - 4。")]),t._v(" "),n("li",[t._v("pre transform 是 Vite 做的一个优化点。预转换的内容会先做缓存，等浏览器发起请求以后，如果已经完成转换，直接将缓存的内容返回给浏览器。")])]),t._v(" "),n("p",[t._v("Vite 在处理步骤 3 时，是通过 esbuild.transform 实现的，对比 Webpack 使用各个 loader 处理源文件，那是非常简单、快捷的")]),t._v(" "),n("h2",{attrs:{id:"优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),n("p",[t._v("在实际开发使用过程中，我们会发现一些问题和不足，这里做些记录")]),t._v(" "),n("h3",{attrs:{id:"懒加载性能变差"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#懒加载性能变差"}},[t._v("#")]),t._v(" 懒加载性能变差")]),t._v(" "),n("p",[t._v("性能差仅限于 dev server 启动以后首次打开应用的某一个页面，原因有两点：")]),t._v(" "),n("ul",[n("li",[t._v("大量的 http 请求")]),t._v(" "),n("li",[t._v("dev server 实时对浏览器请求的文件做 transform")])]),t._v(" "),n("p",[t._v("http 请求数量多这个问题，影响较小，因此只重点关注源文件实时处理这个问题。解决方案也很简单，就是在用户点击某个页面之前，提前向 dev server 发起请求，让 dev server 提前去\n对请求文件做 transform,等到真正需要加载某个资源时，直接返回已经 transform 的资源。这种手段也就是我们常说的 prefetch。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于提前获取首屏资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("link ref"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"preload"')]),t._v(" href"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxxx"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"script"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于提前获取非首屏资源")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("link ref"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prefetch"')]),t._v(" href"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxx"')]),t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"script"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于提前建立 http 连接")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("link ref"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"preconnect"')]),t._v(" href"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),n("p",[t._v("使用 prefetch 策略，有两个问题需要解决:")]),t._v(" "),n("ol",[n("li",[t._v("找到项目中需要懒加载的 path；")]),t._v(" "),n("li",[t._v("将 prefetch 链接添加到 html 文件中；")])]),t._v(" "),n("p",[t._v("首先是找到项目需要懒加载的 path。要完成这一步，有简单的实现，也有复杂的实现。简单的方式，就是开发人员手动定义一个需要 prefetch 的懒加载 path 列表。这种方式简单易用,方便快捷，而且使用\n灵活，但是会加重开发人员的维护成本;复杂的方式，是通过技术手段实现。这种方式，和预加载需要提前获取项目中所有的第三方依赖一样，通过对项目整个源文件做一个依赖分析，然后识别出其中需要懒加载\n的 path。因此我们可以像预加载一样，借助 esbuild 实现。但是这种方式有一个很大的问题，那就是由于我们需要把识别的 path 添加到 html 中，导致识别过程必须在浏览器请求 html 之前完成，这\n就存在阻塞浏览器首屏请求的可能，使得首屏性能下降。综合两种方式的优劣和实现成本，采用第一种方式")]),t._v(" "),n("p",[t._v("把 prefetch 链接添加到 html 文件中就非常简单了，我们可以通过 Vite 提供的 transformIndexHtml hook 实现。这个 hook 给我们提供了在 dev server 返回 html 文件之前修改 html 的机会")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PrefetchLazyPathsPlugin.ts")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("PrefetchLazyPathsPlugin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("paths"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prefetch-lazy-paths-plugin'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transformIndexHtml")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("html"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prefetchStr"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                prefetchStr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('<link rel="prefetch" href="')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" as="script" />')]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newHtml "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'</head>'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("prefetchStr"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("</head>")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newHtml"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lazyPaths "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/src/pages/order-manage/index.tsx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/src/pages/customer-manage/index.tsx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/src/pages/customer-group/index.tsx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    plugins"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("PrefetchLazyPathsPlugin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lazyPaths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("测试可以看到我们的优化策略是生效的，而且效果也非常不错，但是却带来一个很严重的问题,那就是首屏性能更差了。主要是 prefetch 策略使得 dev server 需要在首屏期间需要同时处理首屏资源 + 懒加载页面\n资源，导致首屏资源的响应速度变慢，使得首屏性能下降。这样子的性能优化肯定是没有意义的，我们不能牺牲首屏性能去提升懒加载性能。后来考虑在首屏完成以后通过 fetch API去 prefetch")]),t._v(" "),n("p",[t._v("通过 Vite 提供的 transform hook 实现。这个 hook 给我们提供了在 dev server 返回 transform 以后的代码之前，修改代码的机会。通过这个 hook，我们可以在入口文件\n/src/index.tsx 完成 transform 以后、返回浏览器之前注入 fetch 代码")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PrefetchLazyPathsPlugin.ts")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("PrefetchLazyPathsPlugin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("entry"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" paths"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prefetch-lazy-paths-plugin'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只对入口文件做代码注入")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// onload 会在页面所有资源加载完毕以后触发，这样我们就可以在 onload 内部调用 fetch 去实现 prefetch")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n                    ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(";\n                    window.onload = () => {\n                        const lazyPages = ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(";\n                        lazyPages.forEach(item => fetch(item));\n                    }\n                ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lazyPaths "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/src/pages/order-manage/index.tsx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/src/pages/customer-manage/index.tsx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/src/pages/customer-group/index.tsx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    plugins"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("PrefetchLazyPathsPlugin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/src/index.tsx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lazyPaths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这次优化以后，首屏性能不像上一次那么差，懒加载性能也非常优秀，但依然存在一个问题，那就是首个懒加载页面展示特别慢,我们还是简单做一下分析。整个首页的加载过程为:")]),t._v(" "),n("ol",[n("li",[t._v("首屏加载；")]),t._v(" "),n("li",[t._v("prefetch 懒加载资源；")]),t._v(" "),n("li",[t._v("根据当前路由懒加载 order-manage 页面")])]),t._v(" "),n("p",[t._v("prefetch 导致 dev-server 需要同时处理 order-manage 页面资源 + 其他懒加载页面资源，导致 order-manage 资源响应速度变慢，使得 order-manage 页面渲染速度变慢。\n最好的是在首页懒加载完成以后再去 prefetch")]),t._v(" "),n("ol",[n("li",[t._v("如何量化懒加载已经完成 ？")]),t._v(" "),n("li",[t._v("用户首页懒加载的页面无法确定，我们怎么注入 prefetch 代码 ？")])]),t._v(" "),n("p",[t._v("针对这个问题，目前没有特别好的解决方案，只能给每个懒加载页面都注入 prefetch 代码；人为通过 setTimeout 延迟 1000 ms 去 prefetch 来防止首个懒加载页面资源响应速度变慢")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PrefetchLazyPathsPlugin.ts")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("PrefetchLazyPathsPlugin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("paths"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prefetch-lazy-paths-plugin'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" path "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n                            ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(";\n                            const lazyPages = ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paths"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(";\n                            setTimeout(() => {\n                              lazyPages.forEach(item => fetch(item));\n                            }, timeout);\n                        ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);