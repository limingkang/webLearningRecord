(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{460:function(s,t,a){"use strict";a.r(t);var e=a(33),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" docker")]),s._v(" "),a("h3",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("虽然用户可以通过"),a("strong",[s._v("虚拟机")]),s._v("还原软件的原始环境。但这个方案有几个缺点")]),s._v(" "),a("ul",[a("li",[s._v("虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行")]),s._v(" "),a("li",[s._v("虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录")]),s._v(" "),a("li",[s._v("启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行")])]),s._v(" "),a("p",[s._v("由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔\n离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。由于容器是进程级别的，相比虚拟机有很多优势")]),s._v(" "),a("ul",[a("li",[s._v("容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多")]),s._v(" "),a("li",[s._v("容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源")]),s._v(" "),a("li",[s._v("容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多")])]),s._v(" "),a("p",[s._v("总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多")]),s._v(" "),a("p",[a("strong",[s._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口")]),s._v("。它是目前最流行的 Linux 容器解决方案")]),s._v(" "),a("p",[s._v("Docker 的主要用途，目前有三大类")]),s._v(" "),a("ol",[a("li",[s._v("提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境")]),s._v(" "),a("li",[s._v("提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容")]),s._v(" "),a("li",[s._v("组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构")])]),s._v(" "),a("h3",{attrs:{id:"image文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image文件"}},[s._v("#")]),s._v(" image文件")]),s._v(" "),a("p",[a("strong",[s._v("Docker 把应用程序及其依赖，打包在 image 文件里面")]),s._v("。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件\n生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例")]),s._v(" "),a("p",[s._v("image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往\n里面加入 Apache 服务器，形成你的 image")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出本机的所有 image 文件。")]),s._v("\n$ docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除 image 文件")]),s._v("\n$ docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("imageName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自\n己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作")]),s._v(" "),a("p",[s._v("为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的")]),s._v(" "),a("h3",{attrs:{id:"容器文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器文件"}},[s._v("#")]),s._v(" 容器文件")]),s._v(" "),a("p",[a("strong",[s._v("image 文件生成的容器实例，本身也是一个文件，称为容器文件")]),s._v("。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器\n并不会删除容器文件，只是容器停止运行而已")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出本机正在运行的容器")]),s._v("\n$ docker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出本机所有容器，包括终止运行的容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令")]),s._v("\n$ docker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" --all\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 终止运行的容器文件，依然会占据硬盘空间，可以使用命令删除")]),s._v("\n$ docker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("containerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h3",{attrs:{id:"dockerfile文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile文件"}},[s._v("#")]),s._v(" Dockerfile文件")]),s._v(" "),a("p",[s._v("它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# FROM  <image>[:<tag> | @<digest>] [AS <name>]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# FROM指定一个基础镜像，且必须为Dockerfile文件开篇的每个非注释行,至于image则可以是任何合理存在的image镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# FROM可以在一个Dockerfile中出现多次，以便于创建混合的images。如果没有指定tag,latest将会被指定为要使用的基础镜像版本")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# AS name,可以给新的构建阶段赋予名称。该名称可用于后续FROM 和 COPY --from=<name | index>说明可以引用此阶段中构建的镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" xxxxxxxxxxxxx/image"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("base/node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("10.9.0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("jessie AS build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("env\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . /app\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定接下来的工作路径为/app")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("registry=https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("//registry.npm.taobao.org\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将容器 3000 端口暴露出来， 允许外部连接这个端口")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 3000\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行健康检查 cmd命令在容器启动后执行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HEALTHCHECK")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" curl "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("f http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("//localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("HTTP_PORT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("/ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),s._v(" exit 1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器启动时会先走该sh文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./entrypoint.sh"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h3",{attrs:{id:"docker常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker常用命令"}},[s._v("#")]),s._v(" docker常用命令")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看某个服务的状态")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有容器")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -a\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有镜像")]),s._v("\ndocker images\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停用某个服务")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$imageId")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除本地docker镜像")]),s._v("\ndocker rmi -f "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$imageId")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker中的变量")]),s._v("\ndocker inspect "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$imageId")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除本地所有docker镜像")]),s._v("\ndocker rmi "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("docker images -q"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" -f\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除某个容器")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -f containerid\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除所有容器")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -f "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -a -q"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入docker内部查看nginx配置")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$imageId")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$imageId")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看某个镜像的日志")]),s._v("\ndocker logs -f  --tail"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" imageid\n")])])]),a("h3",{attrs:{id:"docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[s._v("#")]),s._v(" docker-compose")]),s._v(" "),a("p",[s._v("Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一\n个命令，就可以从 YML 文件配置中创建并启动所有服务")]),s._v(" "),a("p",[s._v("Compose 使用的三个步骤：")]),s._v(" "),a("ol",[a("li",[s._v("使用 Dockerfile 定义应用程序的环境")]),s._v(" "),a("li",[s._v("使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行")]),s._v(" "),a("li",[s._v("最后，执行 docker-compose up 命令来启动并运行整个应用程序,如果你想在后台执行该服务可以加上 -d 参数")])]),s._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2.1'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 服务名")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("Studio")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 依赖镜像")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# image: harbor.test.com/test/base_tengine:fb186ee7-20200103-0349")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("DEPLOY_CONTAINER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前HTTP_PORT映射到80")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("HTTP_PORT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("mem_limit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 2048m\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" ./nginx.conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("/etc/nginx/nginx.conf\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" always\n")])])]),a("p",[s._v("代码是在构建时静态复制到容器中的，即通过Dockerfile文件中的COPY src /opt/src命令实现物理主机中的源码复制到容器中，这样在后\n续物理主机src目录中代码的更改不会反应到容器中")]),s._v(" "),a("p",[s._v("可以通过volumes 关键字实现物理主机目录挂载到容器中的功能（同时删除Dockerfile中的COPY指令，不需要创建镜像时将代码打包进镜\n像，而是通过volums动态挂载，容器和物理host共享数据卷")]),s._v(" "),a("p",[s._v("通过volumes（卷）将主机上的项目目录（compose_test/src）挂载到容器中的/opt/src目录下，允许您即时修改代码，而无需重新构建镜像")]),s._v(" "),a("h2",{attrs:{id:"shell脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell脚本"}},[s._v("#")]),s._v(" shell脚本")]),s._v(" "),a("p",[s._v("获取本地ip的方法脚本：")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ifconfig")]),s._v(" -a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" inet"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -v "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -v inet6"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tr")]),s._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"addr:"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),s._v(" -1\n")])])]),a("p",[s._v("shift可以用来向左移动位置参数：")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"参数值为 '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(", 参数个数为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v('"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("shift")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("p",[s._v("Shell的名字 $0；第一个参数 $1；第二个参数 $2；第n个参数 $n；所有参数 $@ 或 $*；参数个数 $#")]),s._v(" "),a("p",[s._v("expr命令是一个手工命令行计数器，用于在UNIX/LINUX下求表达式变量的值，一般用于整数值，也可用于字符串")]),s._v(" "),a("p",[s._v('${BASH_SOURCE[0]}表示bash脚本的第一个参数（如果第一个参数是bash，表明这是要执行bash脚本，这时"${BASH_SOURCE[0]}"自动转换为第二个参数')]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DIR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$( cd -P "'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dirname")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("BASH_SOURCE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v('"\n'),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一条语句就是获取当前目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果第一条语句顺利执行，就执行pwd显示当前目录，并将结果赋值给变量“DIR”")]),s._v("\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" FileName\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在当前bash环境下读取并执行FileName中的命令")]),s._v("\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" line\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" -e "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"s/\\'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${SELF_IP}")]),s._v("/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$SELF_IP")]),s._v('/g"')]),s._v(" \n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对file里面所有SELF_IP替换值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# read通过输入重定向，把file的第一行所有的内容赋值给变量line，循环体内的命令一般包含对变量line的处理；")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然后循环处理file的第二行、第三行。。。一直到file的最后一行")]),s._v("\n")])])]),a("h3",{attrs:{id:"envsubst命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#envsubst命令"}},[s._v("#")]),s._v(" envsubst命令")]),s._v(" "),a("p",[s._v("比如你现在有配置文件：decoder.conf里面有两个配置项写的是：")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("THREAD_NUM:24\nGPU_ID:0\n")])])]),a("p",[s._v("现在你希望通过某个统一的配置来修改这些配置项，以免在部署的时候挨个去改动每个配置文件,那么可以如下操作：")]),s._v(" "),a("ol",[a("li",[s._v("写一个统一配置文件config.conf里面写:")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("thread_num")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gpu_id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("将decoder.conf复制为decoder.conf.emplate,并将decoder.conf.template里面改为")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("THREAD_NUM:"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${thread_num}")]),s._v("\nGPU_ID:"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${gpu_id}")]),s._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[s._v("在命令行中输入："),a("code",[s._v("source config.conf")])])]),s._v(" "),a("li",[a("p",[s._v("在命令行中输入："),a("code",[s._v("envsubst < decoder.conf.template > decoder.conf")])])]),s._v(" "),a("li",[a("p",[s._v("如果只想替换THREAD_NUM，不想替换GPU_ID，那就在命令行输入:")])])]),s._v(" "),a("p",[a("code",[s._v("envsubst '${THREAD_NUM}' < decoder.conf.template > decoder.conf")])]),s._v(" "),a("h2",{attrs:{id:"快速装机必备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速装机必备"}},[s._v("#")]),s._v(" 快速装机必备")]),s._v(" "),a("h3",{attrs:{id:"首先安装我们需要的包-前端就是node-git-vscode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首先安装我们需要的包-前端就是node-git-vscode"}},[s._v("#")]),s._v(" 首先安装我们需要的包,前端就是node git vscode")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://nodejs.cn/download/",target:"_blank",rel:"noopener noreferrer"}},[s._v("node 安装地址"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.git-scm.com/download/mac",target:"_blank",rel:"noopener noreferrer"}},[s._v("git安装或者直接使用npm安装"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("下载vscode之后直接装好对应插件")]),s._v(" "),a("ol",[a("li",[s._v("ESlint")]),s._v(" "),a("li",[s._v("Git history")]),s._v(" "),a("li",[s._v("GitLens "),a("code",[s._v("查看git提交记录")])]),s._v(" "),a("li",[s._v("Vetur "),a("code",[s._v("vue 语法高亮、错误提示、自动格式化等的插件")])])]),s._v(" "),a("p",[s._v("特别的时候是，如果自动保存格式化失效的话，可以从新设置下，在preferences -> settings 找到extensions里面的eslint的配置，可以进去编辑json文件,给个下面的例子，\n但是不通版本可能配置不太一样")]),s._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"editor.codeActionsOnSave"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"source.fixAll.eslint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"editor.formatOnSave"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"eslint.validate"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"javascript"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"html"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vue"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"workbench.editor.enablePreview"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"files.autoSave"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"onFocusChange"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"explorer.confirmDelete"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"js/ts.implicitProjectConfig.experimentalDecorators"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"eslint.codeAction.showDocumentation"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"enable"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"editor.defaultFormatter"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dbaeumer.vscode-eslint"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"vscodeGoogleTranslate.preferredLanguage"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"English"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("接下来我们需要配置git的免密码登陆")]),s._v(" "),a("ol",[a("li",[s._v("本机执行：ssh-keygen -t rsa")]),s._v(" "),a("li",[s._v("遇到提示，直接回车就OK，秘钥生成在用户的根目录的.ssh目录下。比如小白用户的/home/xiaobai/.ssh目录下")]),s._v(" "),a("li",[s._v("复制/home/xiaobai/.ssh/id_rsa.pub文件到目标服务器的/home/login_user/.ssh目录下，并重命名为authorized_keys")]),s._v(" "),a("li",[s._v("如果目标服务器上存在authorized_keys文件，请将id_rsa.pub文件内容追加到authorized_keys,如果不存在.ssh，执行：ssh-keygen -t rsa 生成")])]),s._v(" "),a("p",[s._v("接下来终端oh-my-zsh安装，提供两个命令:")]),s._v(" "),a("p",[a("code",[s._v('sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"')])]),s._v(" "),a("p",[a("code",[s._v('sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"')])]),s._v(" "),a("p",[s._v("记下淘宝镜像地址："),a("code",[s._v("npm install --registry=https://registry.npm.taobao.org")])]),s._v(" "),a("h3",{attrs:{id:"node管理工具nvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node管理工具nvm"}},[s._v("#")]),s._v(" node管理工具nvm")]),s._v(" "),a("p",[s._v("推荐两个命令:")]),s._v(" "),a("p",[a("code",[s._v("curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash")])]),s._v(" "),a("p",[a("code",[s._v("wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash")])])])}),[],!1,null,null,null);t.default=n.exports}}]);